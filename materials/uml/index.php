<?php
include ("index.config.php");
include ($r_base."assets/php_modules/addons.php");

?>
<!DOCTYPE html>
<html lang="ru">
<head>
<?php include ($r_base."assets/php_modules/head.tpt.php"); ?>
</head>
<body>
<div class='container-fluid'>
<?php include ($r_base."assets/php_modules/header.tpt.php"); ?>  
<div class="row">
<?php include ($r_base."assets/php_modules/aside.tpt.php"); ?>
<main class="col-md markdown-body text-justify">


<h2 id="1">1. UML. Диаграммы классов</h2>
<p><strong><em>&nbsp;</em></strong></p>
<p><strong><em>UML</em></strong>&nbsp;&ndash; унифицированный язык моделирования (Unified Modeling Language) &ndash; это система обозначений, которую можно применять для объектно-ориентированного анализа и проектирования.</p>
<p>Его можно использовать для визуализации, спецификации, конструирования и документирования программных систем.</p>
<p>Словарь UML включает три вида строительных блоков:</p>
<ol>
<li>Диаграммы.</li>
<li>Сущности.</li>
<li>Связи.</li>
</ol>
<p>&nbsp;</p>
<p><strong><em>Сущности</em></strong>&nbsp;&ndash; это абстракции, которые являются основными элементами модели,&nbsp;<strong><em>связи</em></strong>&nbsp;соединяют их между собой, а&nbsp;<strong><em>диаграммы</em></strong>&nbsp;группируют представляющие интерес наборы сущностей.</p>
<p>&nbsp;</p>
<p><strong><em>Диаграмма</em></strong>&nbsp;&ndash; это графическое представление набора элементов, чаще всего изображенного в виде связного графа вершин (сущностей) и путей (связей). Язык UML включает&nbsp;<strong>13</strong>&nbsp;видов диаграмм, среди которых на первом месте в списке &mdash; диаграмма классов, о которой и пойдет речь.</p>
<p>Диаграммы классов показывают набор классов, интерфейсов, а также их связи. Диаграммы этого вида чаще всего используются для моделирования объектно-ориентированных систем. Они предназначены для статического представления системы.</p>
<p>Большинство элементов UML имеют уникальную и прямую графическую нотацию, которая дает визуальное представление наиболее важных аспектов элемента.</p>
<p>&nbsp;</p>


<h2 id="2">2. Сущности</h2>
<p>Диаграммы классов оперируют тремя видами сущностей UML:</p>
<ul>
<li>структурные;</li>
<li>поведенческие;</li>
<li>аннотирующие.</li>
</ul>
<p>&nbsp;</p>
<p><strong><em>Структурные сущности</em></strong>&nbsp;&ndash; это &laquo;имена существительные&raquo; в модели UML. В основном, статические части модели, представляющие либо концептуальные, либо физические элементы. Основным видом структурной сущности в диаграммах классов является&nbsp;<strong><em>класс</em></strong>.</p>
<p>&nbsp;</p>
<p><strong><em>Поведенческие сущности</em></strong>&nbsp;&ndash; динамические части моделей UML. Это &laquo;глаголы&raquo; моделей, представляющие поведение модели во времени и пространстве. Основной из них является&nbsp;<strong><em>взаимодействие</em></strong>&nbsp;&ndash; поведение, которое заключается в обмене сообщениями между наборами объектов или ролей в определенном контексте для достижения некоторой цели. Сообщение изображается в виде линии со стрелкой, почти всегда сопровождаемой именем операции.</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<div class="gallery">
	<a href="<?php echo $folder_name ?>img/1.png">
	    <img src="<?php echo $folder_name ?>img/1.png" alt="Рисунок 1">
	</a>
</div><p>&nbsp;</p>
<p class="text-center">Рисунок 1 - Взаимодействие </p>
<p>&nbsp;</p>
<p><strong><em>Аннотирующие сущности</em></strong>&nbsp;&ndash; это поясняющие части UML-моделей, иными словами, комментарии, которые можно применить для описания, выделения и пояснения любого элемента модели. Главная из аннотирующих сущностей &ndash;&nbsp;<strong><em>примечание</em></strong>. Это символ, служащий для описания ограничений и комментариев, относящихся к элементу либо набору элементов. Графически представлен прямоугольником с загнутым углом; внутри помещается текстовый или графический комментарий.</p>
<p>&nbsp;</p>
<div class="gallery">
	<a href="<?php echo $folder_name ?>img/2.png">
	    <img src="<?php echo $folder_name ?>img/2.png" alt="Рисунок 2">
	</a>
</div><p>&nbsp;</p>
<p class="text-center">Рисунок 2 - Примечание </p>
<p>&nbsp;</p>


<h2 id="3">3. Структурные сущности — классы</h2>
<p><strong>Структурные сущности &mdash; классы</strong></p>
<p><strong><em>Класс</em></strong> &ndash; это описание набора объектов с одинаковыми атрибутами, операциями, связями и семантикой.</p>
<p>Графически класс изображается в виде прямоугольника, разделенного на 3 блока горизонтальными линиями:</p>
<ol>
<li>имя класса;</li>
<li>атрибуты (свойства) класса;</li>
<li>операции (методы) класса.</li>
</ol>
<p><br /> Для атрибутов и операций может быть указан один из трех типов видимости:</p>
<ul>
<li><strong>-</strong> &mdash; private (частный);</li>
<li><strong>#</strong> &mdash; protected (защищенный);</li>
<li><strong>+</strong> &mdash; public (общий).</li>
</ul>
<p>Видимость для полей и методов указывается в виде левого символа в строке с именем соответствующего элемента.</p>
<p>Каждый класс должен обладать именем, отличающим его от других классов.&nbsp;<strong><em>Имя</em></strong>&nbsp;&ndash; это текстовая строка. Имя класса может состоять из любого числа букв, цифр и знаков препинания (за исключением двоеточия и точки) и может записываться в несколько строк.</p>
<p>&nbsp;</p>
<p>На практике обычно используются краткие имена классов, взятые из словаря моделируемой системы. Каждое слово в имени класса традиционно пишут с заглавной буквы (верблюжья конвенция), например&nbsp;Sensor&nbsp;(Датчик) или&nbsp;TemperatureSensor&nbsp;(ДатчикТемпературы).</p>
<p>&nbsp;</p><p>&nbsp;</p>
<div class="gallery">
	<a href="<?php echo $folder_name ?>img/3.png">
	    <img src="<?php echo $folder_name ?>img/3.png" alt="Рисунок 3">
	</a>
</div><p>&nbsp;</p>
<p class="text-center">Рисунок 3 - Класс в UML </p>
<p>&nbsp;</p>
<p>Для абстрактного класса имя класса записывается курсивом.</p>
<p>&nbsp;</p>
<p><strong><em>Атрибут</em></strong>&nbsp;(свойство) &ndash; это именованное свойство класса, описывающее диапазон значений, которые может принимать экземпляр атрибута. Класс может иметь любое число атрибутов или не иметь ни одного. В последнем случае блок атрибутов оставляют пустым.</p>
<p>Атрибут представляет некоторое свойство моделируемой сущности, которым обладают все объекты данного класса. Имя атрибута, как и имя класса, может представлять собой текст. На практике для именования атрибута используются одно или несколько коротких существительных, выражающих некое свойство класса, к которому относится атрибут.</p>
<p>Можно уточнить спецификацию атрибута, указав его тип, кратность (если атрибут представляет собой массив некоторых значений) и начальное значение по умолчанию.</p>
<p>Статические атрибуты класса обозначаются подчеркиванием.</p>
<p>&nbsp;</p>
<p><strong><em>Операция</em></strong>&nbsp;(метод) &ndash; это реализация метода класса. Класс может иметь любое число операций либо не иметь ни одной. Часто вызов операции объекта изменяет его атрибуты.</p>
<p>Графически операции представлены в нижнем блоке описания класса.<br /> Допускается указание только имен операций. Имя операции, как и имя класса, должно представлять собой текст. На практике для именования операции используются короткие глагольные конструкции, описывающие некое поведение класса, которому принадлежит операция. Обычно каждое слово в имени операции пишется с заглавной буквы, за исключением первого, например&nbsp;move&nbsp;(переместить) или&nbsp;isEmpty&nbsp;(проверка на пустоту).</p>
<p>&nbsp;</p>
<p>Можно специфицировать операцию, устанавливая ее сигнатуру, включающую имя, тип и значение по умолчанию всех параметров, а применительно к функциям &ndash; тип возвращаемого значения.</p>
<p>Абстрактные методы класса обозначаются курсивным шрифтом.<br /> Статические методы класса обозначаются подчеркиванием.</p>
<p>Изображая класс, не обязательно показывать сразу все его атрибуты и операции. Для конкретного представления, как правило, существенна только часть атрибутов и операций класса. В силу этих причин допускается упрощенное представление класса, то есть для графического представления выбираются только некоторые из его атрибутов. Если помимо указанных существуют другие атрибуты и операции, вы даете это понять, завершая каждый список многоточием.</p>
<p>Чтобы легче воспринимать длинные списки атрибутов и операций, желательно снабдить префиксом (именем стереотипа) каждую категорию в них. В данном случае&nbsp;<strong><em>стереотип</em></strong>&nbsp;&ndash; это слово, заключенное в угловые кавычки, которое указывает то, что за ним следует.</p>
<p>&nbsp;</p>
<div class="gallery">
	<a href="<?php echo $folder_name ?>img/4.png">
	    <img src="<?php echo $folder_name ?>img/4.png" alt="Рисунок 4">
	</a>
</div><p>&nbsp;</p>
<p class="text-center">Рисунок 4 - Класс в UML со стереотипами </p>
<p>&nbsp;</p>


<h2 id="4">4. Отношения между классами</h2>
<p>Существует четыре типа связей в UML:</p>
<ol>
<li>Зависимость</li>
<li>Ассоциация</li>
<li>Обобщение</li>
<li>Реализация</li>
</ol>
<p>Эти связи представляют собой базовые строительные блоки для описания отношений в UML, используемые для разработки хорошо согласованных моделей.</p>
<p>&nbsp;</p>
<p>Первая из них &ndash;&nbsp;<strong><em>зависимость</em></strong>&nbsp;&ndash; семантически представляет собой связь между двумя элементами модели, в которой изменение одного элемента (независимого) может привести к изменению семантики другого элемента (зависимого). Графически представлена пунктирной линией, иногда со стрелкой, направленной к той сущности, от которой зависит еще одна; может быть снабжена меткой.</p>
<p>&nbsp;</p>
<div class="gallery">
	<a href="<?php echo $folder_name ?>img/5.png">
	    <img src="<?php echo $folder_name ?>img/5.png" alt="Рисунок 5">
	</a>
</div><p>&nbsp;</p>
<p class="text-center">Рисунок 5 -Зависимость в UML </p>
<p>&nbsp;</p>
<p>Зависимость &ndash; это связь&nbsp;<strong><em>использования</em></strong>, указывающая, что изменение спецификаций одной сущности может повлиять на другие сущности, которые используют ее.</p>
<p>&nbsp;</p>
<p><strong><em>Ассоциация</em></strong>&nbsp;&ndash; это структурная связь между элементами модели, которая описывает набор связей, существующих между объектами.<br /> Ассоциация показывает, что объекты одной сущности (класса) связаны с объектами другой сущности таким образом, что можно перемещаться от объектов одного класса к другому.</p>
<p>Например, класс&nbsp;<strong>Человек</strong>&nbsp;и класс&nbsp;<strong>Школа</strong>&nbsp;имеют ассоциацию, так как человек может учиться в школе. Ассоциации можно присвоить имя &laquo;учится в&raquo;. В представлении однонаправленной ассоциации добавляется стрелка, указывающая на направление ассоциации.</p>
<p>&nbsp;</p>
<div class="gallery">
	<a href="<?php echo $folder_name ?>img/6.png">
	    <img src="<?php echo $folder_name ?>img/6.png" alt="Рисунок 6">
	</a>
</div><p>&nbsp;</p>
<p class="text-center">Рисунок 6 - Ассоциация в UML </p>
<p>&nbsp;</p>
<p>Двойные ассоциации представляются линией без стрелок на концах, соединяющей два классовых блока.</p>
<p>Ассоциация может быть именованной, и тогда на концах представляющей её линии будут подписаны роли, принадлежности, индикаторы, мультипликаторы, видимости или другие свойства.</p>
<p>&nbsp;</p>
<p><strong><em>Множественность ассоциации</em></strong>&nbsp;представляет собой диапазон целых чисел, указывающий возможное количество связанных объектов. Он записывается в виде выражения с минимальным и максимальным значением; для их разделения используются две точки. Устанавливая множественность дальнего конца ассоциации, вы указываете, сколько объектов может существовать на дальнем конце ассоциации для каждого объекта класса, находящегося на ближнем ее конце. Количество объектов должно находиться в пределах заданного диапазона. Множественность может быть определена как единица 1, ноль или один 0..1, любое значение 0..* или *, один или несколько 1..*. Можно также задавать диапазон целых значений, например 2..5, или устанавливать точное число, например 3.</p>
<p>&nbsp;</p>
<div class="gallery">
	<a href="<?php echo $folder_name ?>img/7.png">
	    <img src="<?php echo $folder_name ?>img/7.png" alt="Рисунок 7">
	</a>
</div><p>&nbsp;</p>
<p class="text-center">Рисунок 7 - Множественная ассоциация в UML </p>
<p><strong><em>&nbsp;</em></strong></p>
<p><strong><em>Агрегация</em></strong>&nbsp;&ndash; особая разновидность ассоциации, представляющая структурную связь целого с его частями. Как тип ассоциации, агрегация может быть именованной. Одно отношение агрегации не может включать более двух классов (контейнер и содержимое).</p>
<p>Агрегация встречается, когда один класс является коллекцией или контейнером других. Причём, по умолчанию агрегацией называют агрегацию по ссылке, то есть, когда время существования содержащихся классов не зависит от времени существования содержащего их класса. Если контейнер будет уничтожен, то его содержимое &mdash; нет.</p>
<p>Графически агрегация представляется пустым ромбом на блоке класса &laquo;целое&raquo;, и линией, идущей от этого ромба к классу &laquo;часть&raquo;.</p>
<p>&nbsp;</p>
<div class="gallery">
	<a href="<?php echo $folder_name ?>img/8.png">
	    <img src="<?php echo $folder_name ?>img/8.png" alt="Рисунок 8">
	</a>
</div><p>&nbsp;</p>
<p class="text-center">Рисунок 8 - Агрегация в UML </p>
<p>&nbsp;</p>
<p><strong><em>Композиция</em></strong>&nbsp;&mdash; более строгий вариант агрегации. Известна также как агрегация по значению.</p>
<p>Композиция &ndash; это форма агрегации с четко выраженными отношениями владения и совпадением времени жизни частей и целого. Композиция имеет жёсткую зависимость времени существования экземпляров класса контейнера и экземпляров содержащихся классов. Если контейнер будет уничтожен, то всё его содержимое будет также уничтожено.</p>
<p>Графически представляется, как и агрегация, но с закрашенным ромбиком.</p>
<p>&nbsp;</p>
<div class="gallery">
	<a href="<?php echo $folder_name ?>img/9.png">
	    <img src="<?php echo $folder_name ?>img/9.png" alt="Рисунок 9">
	</a>
</div><p>&nbsp;</p>
<p class="text-center">Рисунок 9 - Композиция в UML </p>
<p>&nbsp;</p>
<p>Третья связь &ndash; <strong><em>обобщение</em></strong> &ndash; выражает специализацию или <strong><em>наследование</em></strong>, в котором специализированный элемент (потомок) строится по спецификациям обобщенного элемента (родителя). Потомок разделяет структуру и поведение родителя. Графически обобщение представлено в виде сплошной линии с пустой стрелкой, указывающей на родителя.</p>
<p>&nbsp;</p>
<div class="gallery">
	<a href="<?php echo $folder_name ?>img/10.png">
	    <img src="<?php echo $folder_name ?>img/10.png" alt="Рисунок 10">
	</a>
</div><p>&nbsp;</p>
<p class="text-center">Рисунок 10 - Обобщение в UML </p>
<p>&nbsp;</p>
<p>Четвертая &ndash;&nbsp;<strong><em>реализация</em></strong>&nbsp;&ndash; это семантическая связь между классами, когда один из них (<strong>поставщик</strong>) определяет соглашение, которого второй (<strong>клиент</strong>) обязан придерживаться. Это связи между интерфейсами и классами, которые реализуют эти интерфейсы. Это, своего рода, отношение &laquo;целое-часть&raquo;. Поставщик, как правило, представлен абстрактным классом. В графическом исполнении связь реализации &ndash; это гибрид связей обобщения и зависимости: треугольник указывает на поставщика, а второй конец пунктирной линии &ndash; на клиента.</p>
<p>&nbsp;</p>
<div class="gallery">
	<a href="<?php echo $folder_name ?>img/11.png">
	    <img src="<?php echo $folder_name ?>img/11.png" alt="Рисунок 11">
	</a>
</div><p>&nbsp;</p>
<p class="text-center">Рисунок 11 - Реализация в UML </p>
<p>&nbsp;</p>


<h2  id="5">Пример кода и диаграммы классов для него</h2>
<p>Программа получает данные с датчика температуры (вводятся с консоли) &mdash; по 5 измерений для каждого из двух объектов класса TemperatureMeasure и усредняет их. Также предусмотрен класс ShowMeasure для вывода измеренных значений.</p>
<pre class="highlight"><code data-language="c">
#include <iostream>
using namespace std;

class Sensor
{
    int value;
public:
    Sensor() { value = 0; }
    void setValue(int value) { this->value += value; }
    int getValue() { return value; }
};

class MeasureCount
{
    int number;
    static int total;
public:
    MeasureCount() { number = 0; }
    void increment() { number++; total++; }
    int getNumber() { return number; }
    static int getTotal() { return total; }
};

int MeasureCount::total = 0;

class ITemperatureMeasure // интерфейс
{
public:
    virtual void setValue() = 0;
    virtual double getValue() = 0;
};

class TemperatureMeasure : public virtual ITemperatureMeasure
{ // реализация интерфейса
private:
    Sensor* h;        // агрегация
    MeasureCount* measure;  // композиция
public:
    TemperatureMeasure(Sensor* h)
    {
        measure = new MeasureCount();
        this->h = h;
    }
    void setValue()
    {
        int value;
        measure->increment();
        cout << "t[" << measure->getNumber() << "]= ";
        cin >> value;
        h->setValue(value);
    }
    double getValue() { return (double)h->getValue() / measure->getNumber(); }
    int getNumber() { return measure->getNumber(); }
    static int getTotal() { return MeasureCount::getTotal(); }
};

class ShowTemperature // зависимость
{
public:
    static void Show(TemperatureMeasure t)
    {
        cout << t.getNumber() << ": ";
        cout << t.getValue() << " oC" << endl;
    }
};

int main()
{
    Sensor* h1 = new Sensor();
    TemperatureMeasure tc1(h1);

    for (int i = 0; i < 5; i++)
        tc1.setValue(); // требуется ввести температуру за 5 дней

    ShowTemperature::Show(tc1); // вывод средней температуры
    cout << endl;

    Sensor* h2 = new Sensor();
    TemperatureMeasure tc2(h2);

    for (int i = 0; i < 5; i++)
        tc2.setValue(); // требуется ввести температуру за 5 дней

    ShowTemperature::Show(tc2); // вывод средней температуры
    cout << endl;
    cout << "Total: " << TemperatureMeasure::getTotal() << endl;
    system("pause");
    return 0;
}

</code></pre>
<p class="text-center">Листинг 1 &ndash; Пример кода</p>
<p>&nbsp;</p>
<p>UML-диаграмма классов для приведенного выше кода будет выглядеть следующим образом:</p><p>&nbsp;</p>
<div class="gallery">
	<a href="<?php echo $folder_name ?>img/12.png">
	    <img src="<?php echo $folder_name ?>img/12.png" alt="Рисунок 12">
	</a>
</div>
<p>&nbsp;</p>
<p class="text-center">Рисунок 12 -  Диаграмма UML по листингу 1 </p>
<p>&nbsp;</p>
<p>На диаграмме классов основным классом является класс&nbsp;TemperatureMeasure, который и является измерителем температуры. В качестве измеренного значения формируется среднее арифметическое всех измерений - сумма всех измерений, деленная на их количество.</p>
<p>Для получения измерений и их суммирования используется класс Sensor (в качестве датчика температуры). В консольной задаче сами измерения передаются в этот класс для суммирования. Класс состоит в отношении агрегации с основным классом&nbsp;TemperatureMeasure: мы сначала создаем объект класса Sensor, а потом передаем его в качестве параметра конструктора классу&nbsp;TemperatureMeasure, чтобы использовать его в качестве части класса.</p>
<p>Количество измерений формируется классом MeasureCount, который содержит статическое свойство total для подсчета общего измерений, а также свойство count для подсчета количества измерителей конкретного объекта TemperatureMeasure. Класс&nbsp;MeasureCount находится в отношении композиции с классом TemperatureMeasure: объект MeasureCount создается непосредственно при создании объекта TemperatureMeasure (в его конструкторе).</p>
<p>Класс ITemperatureMeasure представляет собой интерфейс класса TemperatureMeasure и является своего рода <strong>поставщиком</strong> в отношении реализации.</p>
<p>Наконец, класс ShowTemperature находится в отношении зависимости с классом TemperatureMeasure, поскольку реализация единственного метода Show класса ShowTemperature зависит от структуры класса TemperatureMeasure.</p>
<p>&nbsp;</p>
<h2 id="6">Список литературы</h2>
<ol>
<li>Нейбург Эрик Дж., Максимчук Роберт А. UML для простых смертных, 2016 &ndash; 270 с.</li>
<li>Мартин Фаулер. UML. Основы. 3 издание, 2019 &ndash; 192 с.</li>
</ol>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>

</main><!--end main-->
</div><!--end .row-->
<?php include ($r_base."assets/php_modules/footer.tpt.php"); ?>  
</div><!--end .container-fluid-->
<?php include ($r_base."assets/php_modules/scripts.tpt.php"); ?>
</body>
</html>