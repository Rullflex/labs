<?php
include ("index.config.php");
include ($r_base."assets/php_modules/addons.php");
?>
<!DOCTYPE html>
<html lang="ru">
<head>
    <?php include ($r_base."assets/php_modules/head.tpt.php"); ?>
</head>
<body>
<div class='container-fluid'>
<?php include ($r_base."assets/php_modules/header.tpt.php"); ?>  
<div class="row">
<?php include ($r_base."assets/php_modules/aside.tpt.php"); ?>
<main class="col-md markdown-body">
<h2 id="1">1. Краткие теоретические сведения</h2>
<div class="block__text text-justify">
    &#8226; Бинарное дерево – это динамическая структура данных, состоящая из узлов, каждый из которых содержит, кроме данных, не более двух ссылок на различные бинарные деревья. На каждый узел имеется ровно одна ссылка.
    <br>
    &#8226; Описать такую структуру можно следующим образом:
    <pre class="highlight"><code data-language="c" id="">struct point
{
int data;//информационное поле
point *left;//адрес левого поддерева
point *right;//адрес правого поддерева
};</code></pre>
    &#8226; Начальный узел называется корнем дерева. Узел, не имеющий поддеревьев, называется листом. Исходящие узлы называются предками, входящие — потомками. Высота дерева определяется количеством уровней, на которых располагаются его узлы.
    <br>
    &#8226; Если дерево организовано таким образом, что для каждого узла все ключи его левого поддерева меньше ключа этого узла, а все ключи его правого поддерева — больше, оно называется деревом поиска. Одинаковые ключи не допускаются. В дереве поиска можно найти элемент по ключу, двигаясь от корня и переходя на левое или правое поддерево в зависимости от значения ключа в каждом узле. Такой поиск гораздо эффективнее поиска по списку, поскольку время поиска определяется высотой дерева, а она пропорциональна двоичному логарифму количества узлов.
    <br>
    &#8226; В идеально сбалансированном дереве количество узлов справа и слева отличается не более чем на единицу.
    <br>
    &#8226; Линейный список можно представить как вырожденное бинарное дерево, в котором каждый узел имеет не более одной ссылки. Для списка среднее время поиска равно половине длины списка.
    <br>
    &#8226; Деревья и списки являются рекурсивными структурами, т. к. каждое поддерево также является деревом. Таким образом, дерево можно определить как рекурсивную структуру, в которой каждый элемент является:
    <br>
    &#8195;&#8195;либо пустой структурой;
    <br>
    &#8195;&#8195;либо элементом, с которым связано конечное число поддеревьев.
    <br>
    &#8226; Действия с рекурсивными структурами удобнее всего описываются с помощью рекурсивных алгоритмов.
</div>

<h2 id="2">2. Обход дерева</h2>
<div class="block__text text-justify">
    <br> Для того, чтобы выполнить определенную операцию над всеми узлами дерева, все узлы надо обойти. Такая задача называется обходом дерева. При обходе узлы должны посещаться в определенном порядке. Существуют три принципа упорядочивания. Рассмотрим дерево, представленное на рисунке 1:
    <img src="<?php echo $folder_name ?>img/a60043fd.png" alt="Рисунок 1">
    <p style="text-align: center;">Рисунок 1 – Бинарное дерево</p>
    <br>
    &#8226; На этом дереве можно определить три метода упорядочивания:
    <br>
    Слева направо: Левое поддерево – Корень – Правое поддерево;
    <br>
    Сверху вниз: Корень – Левое поддерево – Правое поддерево;
    <br>
    Снизу вверх: Левое поддерево – Правое поддерево – Корень.
    <br>
    &#8226; Эти три метода можно сформулировать в виде рекурсивных алгоритмов.
    <pre class="highlight"><code data-language="c" id="">void Run(point*p)
//обход слева направо
{
if(p)
{
&#60;обработка p-&#62;data&#62;
Run(p-&#62;left);//переход к левому поддереву
Run(p-&#62;right);//переход к правому поддереву
}
}</code></pre>
    &#8226; Если в качестве операции обработки узла поставить операцию вывода информационного поля, то мы получим функцию для печати дерева.
</div>
</main><!--end main-->
</div><!--end .row-->
<?php include ($r_base."assets/php_modules/footer.tpt.php"); ?>  
</div><!--end .container-fluid-->
<?php include ($r_base."assets/php_modules/scripts.tpt.php"); ?>
</body>
</html>