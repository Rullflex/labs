<?php
include ("index.config.php");
include ($r_base."assets/php_modules/addons.php");

?>
<!DOCTYPE html>
<html lang="ru">
<head>
<?php include ($r_base."assets/php_modules/head.tpt.php"); ?>
</head>
<body>
<div class='container-fluid'>
<?php include ($r_base."assets/php_modules/header.tpt.php"); ?>  
<div class="row">
<?php include ($r_base."assets/php_modules/aside.tpt.php"); ?>
<main class="col-md markdown-body">

<h2 id="1">1. Классы</h2>
<p>&#8226; <b>Объектно - ориентированное программирование (ООП)</b> – технология создания программного обеспечения, основанная на представлении программы в виде совокупности автономно действующих объектов, каждый из которых является экземпляром определенного класса.</p>
<p>&#8226; <b> Класс </b>– шаблон ещё не созданного объекта. Все данные класса хранятся в его полях. Поле класса – это переменная, описание которой создает программист при создании класса. Функции, реализуемые в классе, называются его методами.</p>

<h2 id="2">2. Внешний и внутренний интерфейс. Инкапсуляция</h2>

<p>&#8226; <b>Внутренний интерфейс </b>– это свойства и методы, доступ к которым может быть осуществлён только из других методов данного объекта, их также называют «приватными». </p>
<p>&#8226; <b>Внешний интерфейс</b> – это свойства и методы, доступные снаружи объекта, их называют «публичными».</p>
<p>&#8226; <b>Инкапсуляция </b>– это механизм программирования, позволяющий объединить поля и методы, работающие данными, в классе и скрыть детали внутреннего интерфейса от пользователя.</p>
<p>&#8226; Для реализации процесса инкапсуляции существуют спецификаторы доступа, такие как:</p>

<ul>
    <li> <code class="highlight">public </code>– открытый раздел класса. К полям и методам в этом разделе можно обращаться как внутри класса, так и вне. Этот раздел образует “внешний интерфейс”; </li>
    <li> <code class="highlight">private</code> – закрытый раздел класса. К полям и методам в этом разделе можно обращаться только внутри класса. Этот раздел образует “внутренний интерфейс”. По умолчанию все поля класса – private; </li>
    <li> <code class="highlight">protected</code> – специальный размер класса. К полям и методам в этом можно обращаться внутри класса, а также в  «дочерних» классах при наследовании.(смотреть лекцию «Наследование»).</li>
</ul>

<p>&#8226; Пример создания класса и обращения к его полям на алгоритмическом языке С++ </p>
<pre class="highlight"><code data-language="c">
#include &#60;iostream&#62;

using namespace std;

class Point //создание класса при помощи ключевого слова class
{
private: //Спецификатор доступа
	int x; //поле класса
	int y; //поле класса
public: //спецификатор доступа
	void Set_Point(int x1, int y1) //метод класса, позволяющий задать координаты точки
	{
		x = x1;
		y = y1;
	}
	void Show_Point() //метод класса, выводящий на экран координаты точки
	{
		cout &#60;&#60; x &#60;&#60; ' ' &#60;&#60; y;
	}

};

int main()
{
	
	Point Example; //создание объекта класса Point
	Example.Set_Point(10,12); //Использования метода Set_Point для объекта Example
	Example.Show_Point(); //Использования метода Show_Point для объекта Example

}
</code></pre>

<h2 id="3">3. Конструктор и деструктор</h2>
<!-- <h3>1.1 ....</h3> -->
<p>&#8226; <b>Конструктор </b>– специальный метод, служащий для создания новых объектов.
Конструктор имеет то же имя, что и класс. Если в программе не было объявлено ни одного собственного конструктора, компилятор по умолчанию создаёт конструктор, не выполняющий никаких действий. Существует 3 типа конструкторов: </p>
<ol>
    <li> Конструктор без параметров <br> Реализация конструктора без параметров на алгоритмическом языке С++ 
    <pre class="highlight"><code data-language="c">
    Point()//Конструктор без параметров 
	{
		x = 0;
		y = 0;
	};
    </code></pre>
    </li>

    <li> Конструктор с параметрами <br> Реализация конструктора с параметрами на алгоритмическом языке С++ 
    <pre class="highlight"><code data-language="c">
    Point(int x1, int y1)// Конструктор с парaметрами
	{
		x = x1;
		y = y1;
	};
    </code></pre>
    </li>

    <li>  Конструктор копирования <br> Реализация конструктора копирования на алгоритмическом языке С++  
    <pre class="highlight"><code data-language="c">
    Point(const Point& b)// Конструктор копирования
	{
		x = b.x;
		y = b.y;

       };
    </code></pre>
    </li>
</ol>

<p>&#8226; <b>Деструктор </b>– специальный метод, уничтожающий объект при его выходе из блока. <br> Реализация деструктора на алгоритмическом языке С++ </p>
 <pre class="highlight"><code data-language="c">
 ~Point()
{

}
    </code></pre>

    <p>&#8226; Деструктор вызывается автоматически. Если деструктор не был объявлен программистом,  копмилятор просто очистит ту память, которую занимал объект, но  когда при выходе из блока нужно удалить что-то ещё, то необходимо самостоятельно описать деструктор. </p>

    <h2 id="4">Список литературы</h2>
    <ol>
    <li> А.М. Ноткин. Объектно-ориентированное программирование: ООП на языке С++,  2013. – 5 с.</li>
    <li> О.А.Полякова, О.Л.Викентьева. Технологии разработки объектно-ориентированных программ на языке С++,  2019. – 27 с.</li>
</ol>

</main><!--end main-->
</div><!--end .row-->
<?php include ($r_base."assets/php_modules/footer.tpt.php"); ?>  
</div><!--end .container-fluid-->
<?php include ($r_base."assets/php_modules/scripts.tpt.php"); ?>
</body>
</html>