<?php
include ("index.config.php");
include ($r_base."assets/php_modules/addons.php");
?>
<!DOCTYPE html>
<html lang="ru">
<head>
    <?php include ($r_base."assets/php_modules/head.tpt.php"); ?>
</head>
<body>
<div class='container-fluid'>
<?php include ($r_base."assets/php_modules/header.tpt.php"); ?>  
<div class="row">
<?php include ($r_base."assets/php_modules/aside.tpt.php"); ?>
<main class="col-md markdown-body">

<h2 id="1">1. Постановка задачи</h2>
<ol>
    <li>Определить пользовательский класс.</li>
    <li>Определить в классе следующие конструкторы: без параметров, с параметрами, конструктор копирования.</li>
    <li>Определить в классе деструктор.</li>
    <li>Определить в классе компоненты-функции для просмотра и установки полей данных (селекторы и модификаторы).</li>
    <li>Перегрузить операцию присваивания.</li>
    <li>Перегрузить операции ввода и вывода объектов с помощью потоков.</li>
    <li>Перегрузить операции указанные в варианте.</li>
    <li>Написать программу, в которой продемонстрировать создание объектов и работу всех перегруженных операций.</li>
</ol>
<h2 id="2">2. Варианты заданий</h2>
<table class="">
<thead>
    <tr>
        <th>
            №
        </th>
        <th>
            Задание
        </th>
    </tr>
</thead>
<tbody>
    <tr>
        <td>1</td>
        <td>Создать класс Money для работы с денежными суммами. Число должно быть представлено двумя полями: типа long для рублей и типа int для копеек. Дробная часть числа при выводе на экран должна быть отделена от целой части запятой. Реализовать:
        <br>&mdash; деление сумм,
        <br>&mdash; умножение суммы на дробное число.
        </td>
    </tr>
    <tr>
        <td>2</td>
        <td>Создать класс Time для работы с временными интервалами. Интервал должен быть представлен в виде двух полей: минуты типа int и секунды типа int. при выводе минуты отделяются от секунд двоеточием. Реализовать:
<br>&mdash; добавление секунд (учесть, что в минуте не может быть более 60 секунд),
<br>&mdash; сравнение временных интервалов (== и !=).
</td>
    </tr>
    <tr>
        <td>3</td>
        <td>Создать класс Money для работы с денежными суммами. Число должно быть представлено двумя полями: типа long для рублей и типа int для копеек. Дробная часть числа при выводе на экран должна быть отделена от целой части запятой. Реализовать:
<br>&mdash; сложение суммы и дробного числа,
<br>&mdash; операции сравнения (>, <, ==).
</td>
    </tr>
    <tr>
        <td>4</td>
        <td>Создать класс Time для работы с временными интервалами. Интервал должен быть представлен в виде двух полей: минуты типа int и секунды типа int. при выводе минуты отделяются от секунд двоеточием. Реализовать:
<br>&mdash; добавление секунд (учесть, что в минуте не может быть более 60 секунд),
<br>&mdash; вычитание секунд.
</td>
    </tr>
    <tr>
        <td>5</td>
        <td>Создать класс Money для работы с денежными суммами. Число должно быть представлено двумя полями: типа long для рублей и типа int для копеек. Дробная часть числа при выводе на экран должна быть отделена от целой части запятой. Реализовать:
<br>&mdash; вычитание дробного числа из суммы,
<br>&mdash; операции сравнения (==, !=).
</td>
    </tr>
    <tr>
        <td>6</td>
        <td>Создать класс Time для работы с временными интервалами. Интервал должен быть представлен в виде двух полей: минуты типа int и секунды типа int. При выводе минуты отделяются от секунд двоеточием. Реализовать:
<br>&mdash; вычитание временных интервалов (учесть, что в минуте не может быть более 60 секунд),
<br>&mdash; сравнение временных интервалов (!=).
</td>
    </tr>
    <tr>
        <td>7</td>
        <td>Создать класс Money для работы с денежными суммами. Число должно быть представлено двумя полями: типа long для рублей и типа int для копеек. Дробная часть числа при выводе на экран должна быть отделена от целой части запятой. Реализовать:
<br>&mdash; операции сравнения (==, !=),
<br>&mdash; вычитание копеек (--) (постфиксная и префиксная формы).
</td>
    </tr>
    <tr>
        <td>8</td>
        <td>Создать класс Time для работы с временными интервалами. Интервал должен быть представлен в виде двух полей: минуты типа int и секунды типа int. при выводе минуты отделяются от секунд двоеточием. Реализовать:
<br>&mdash; сложение временных интервалов (учесть, что в минуте не может быть более 60 секунд),
<br>&mdash; сравнение временных интервалов (==).
</td>
    </tr>
    <tr>
        <td>9</td>
        <td>Создать класс Pair (пара чисел). Пара должна быть представлено двумя полями: типа int для первого числа и типа double для второго. Первое число при выводе на экран должно быть отделено от второго числа двоеточием. Реализовать:
<br>&mdash; операции сравнения (<, >).
<br>&mdash; операция --, которая работает следующим образом: если форма операции, префиксная, то уменьшается первое число, если форма операции постфиксная, то уменьшается второе число.
</td>
    </tr>
    <tr>
        <td>10</td>
        <td>Создать класс Time для работы с временными интервалами. Интервал должен быть представлен в виде двух полей: минуты типа int и секунды типа int. при выводе минуты отделяются от секунд двоеточием. Реализовать:
<br>&mdash; вычитание секунд,
<br>&mdash; сравнение временных интервалов (== и !=).
</td>
    </tr>
    <tr>
        <td>11</td>
        <td>Создать класс Pair (пара чисел). Пара должна быть представлено двумя полями: типа int для первого числа и типа double для второго. Первое число при выводе на экран должно быть отделено от второго числа двоеточием. Реализовать:
<br>&mdash; операции сравнения (<, >),
<br>&mdash; операция ++, которая работает следующим образом: если форма операции префиксная, то увеличивается первое число, если форма операции постфиксная, то увеличивается второе число.
</td>
    </tr>
    <tr>
        <td>12</td>
        <td>Создать класс Money для работы с денежными суммами. Число должно быть представлено двумя полями: типа long для рублей и типа int для копеек. Дробная часть числа при выводе на экран должна быть отделена от целой части запятой. Реализовать:
<br>&mdash; сложение денежных сумм,
<br>&mdash; вычитание денежных сумм.
</td>
    </tr>
    <tr>
        <td>13</td>
        <td>Создать класс Money для работы с денежными суммами. Число должно быть представлено двумя полями: типа long для рублей и типа int для копеек. Дробная часть числа при выводе на экран должна быть отделена от целой части запятой. Реализовать:
<br>&mdash; операции сравнения (<, >),
<br>&mdash; добавление копеек (++) (постфиксная и префиксная формы).
</td>
    </tr>
    <tr>
        <td>14</td>
        <td>Создать класс Money для работы с денежными суммами. Число должно быть представлено двумя полями: типа long для рублей и типа int для копеек. Дробная часть числа при выводе на экран должна быть отделена от целой части запятой. Реализовать:
<br>&mdash; деление сумм,
<br>&mdash; умножение суммы на дробное число.
</td>
    </tr>
    <tr>
        <td>15</td>
        <td>Создать класс Pair (пара чисел). Пара должна быть представлено двумя полями: типа int для первого числа и типа double для второго. Первое число при выводе на экран должно быть отделено от второго числа двоеточием. Реализовать:
<br>&mdash; операции сравнения (<, >).
<br>&mdash; операция --, которая работает следующим образом: если форма операции, префиксная, то уменьшается первое число, если форма операции постфиксная, то уменьшается второе число.
</td>
    </tr>
    <tr>
        <td>16</td>
        <td>Создать класс Money для работы с денежными суммами. Число должно быть представлено двумя полями: типа long для рублей и типа int для копеек. Дробная часть числа при выводе на экран должна быть отделена от целой части запятой. Реализовать:
<br>&mdash; вычитание дробного числа из суммы,
<br>&mdash; операции сравнения (==, !=).
</td>
    </tr>
    <tr>
        <td>17</td>
        <td>Создать класс Pair (пара чисел). Пара должна быть представлено двумя полями: типа int для первого числа и типа double для второго. Первое число при выводе на экран должно быть отделено от второго числа двоеточием. Реализовать:
<br>&mdash; операции сравнения (<, >),
<br>&mdash; операция --, которая работает следующим образом: если форма операции префиксная, то уменьшается первое число, если форма операции постфиксная, то уменьшается второе число.
</td>
    </tr>
    <tr>
        <td>18</td>
        <td>Создать класс Time для работы с временными интервалами. Интервал должен быть представлен в виде двух полей: минуты типа int и секунды типа int. при выводе минуты отделяются от секунд двоеточием. Реализовать:
<br>&mdash; сложение временных интервалов (учесть, что в минуте не может быть более 60 секунд),
<br>&mdash; сравнение временных интервалов (==).
</td>
    </tr>
    <tr>
        <td>19</td>
        <td>Создать класс Pair (пара чисел). Пара должна быть представлено двумя полями: типа int для первого числа и типа double для второго. Первое число при выводе на экран должно быть отделено от второго числа двоеточием. Реализовать:
<br>&mdash; операции сравнения (==,!=),
<br>&mdash; вычитание константы из пары (уменьшается первое число, если константа целая, второе, если константа вещественная).
</td>
    </tr>
    <tr>
        <td>20</td>
        <td>Создать класс Time для работы с временными интервалами. Интервал должен быть представлен в виде двух полей: минуты типа int и секунды типа int. При выводе минуты отделяются от секунд двоеточием. Реализовать:
<br>&mdash; вычитание временных интервалов (учесть, что в минуте не может быть более 60 секунд),
<br>&mdash; сравнение временных интервалов (!=).
</td>
    </tr>
    <tr>
        <td>21</td>
        <td>Создать класс Pair (пара чисел). Пара должна быть представлено двумя полями: типа int для первого числа и типа double для второго. Первое число при выводе на экран должно быть отделено от второго числа двоеточием. Реализовать:
<br>&mdash; вычитание пар чисел,
<br>&mdash; добавление константы к паре (увеличивается первое число, если константа целая, второе, если константа вещественная).
</td>
    </tr>
    <tr>
        <td>22</td>
        <td>Создать класс Time для работы с временными интервалами. Интервал должен быть представлен в виде двух полей: минуты типа int и секунды типа int. При выводе минуты отделяются от секунд двоеточием. Реализовать:
<br>&mdash; добавление секунд (учесть, что в минуте не может быть более 60 секунд),
<br>&mdash; сравнение временных интервалов (== и !=).
</td>
    </tr>
    <tr>
        <td>23</td>
        <td>Создать класс Money для работы с денежными суммами. Число должно быть представлено двумя полями: типа long для рублей и типа int для копеек. Дробная часть числа при выводе на экран должна быть отделена от целой части запятой. Реализовать:
<br>&mdash; сложение суммы и дробного числа,
<br>&mdash; операции сравнения (>, <, ==).
</td>
    </tr>
    <tr>
        <td>24</td>
        <td>Создать класс Time для работы с временными интервалами. Интервал должен быть представлен в виде двух полей: минуты типа int и секунды типа int. при выводе минуты отделяются от секунд двоеточием. Реализовать:
<br>&mdash; добавление секунд (учесть, что в минуте не может быть более 60 секунд),
<br>&mdash; вычитание секунд.
</td>
    </tr>
    <tr>
        <td>25</td>
        <td>Создать класс Money для работы с денежными суммами. Число должно быть представлено двумя полями: типа long для рублей и типа int для копеек. Дробная часть числа при выводе на экран должна быть отделена от целой части запятой. Реализовать:
<br>&mdash; операции сравнения (==, !=),
<br>&mdash; вычитание копеек (--) (постфиксная и префиксная формы).
</td>
    </tr>
</tbody>
</table>
<h2 id="3">3. Методические указания</h2>
<ol>
    <li>1.	Объявления классов сохранить в библиотечном файле с расширением .h (например, Money.h), а реализации методов и дружественных функций в одноименному ему файле.cpp (например, Money.cpp). Функцию main() сохранить в файле с расширением .cpp. Заголовочный файл подключить с помощью директивы #include “имя_файла.h”. Пример:
    <div class="gallery">
	<a href="<?php echo $folder_name ?>img/1.png">
	    <img src="<?php echo $folder_name ?>img/1.png" alt="Рисунок 1">
	</a>
    </div>
    <p class="text-center lead">Рисунок 1 - Описание класса Integer в файле Integer.h</p>
    <div class="gallery">
	<a href="<?php echo $folder_name ?>img/2.png">
	    <img src="<?php echo $folder_name ?>img/2.png" alt="Рисунок 2">
	</a>
    </div>
    <p class="text-center lead">Рисунок 2 - Опередение методов (операций) и дружелюбных функций (также операций) в файле Integr.cpp</p>
    
    </li>
    
    <li>В функции main() должны быть размещены только описания переменных и обращения к соответствующим операциям. </li>
    <li>Интерфейс реализовать с помощью текстового меню.</li>
</ol>
<h2 id="4">4. Содержание отчета</h2>
<ol>
    <li>Постановка задачи (общая и для конкретного варианта);</li>
    <li>Анализ задачи:</li>
    <ul>
        <li>&#8226; Определения функций для реализации поставленных задач;</li>
        <li>&#8226; Определение функции main();</li>
    </ul>
    <li>Блок-схема;</li>
    <li>Текст программы;</li>
    <li>Тесты.</li>
</ol>
<?php
if ($sendwork_off == false) { ?>
    <h2 id="4">4. Отправить результат работы</h2>
    <?php include ($r_base."assets/php_modules/form_sendwork.tpt.php"); 
}
?>
</main><!--end main-->
</div><!--end .row-->
<?php include ($r_base."assets/php_modules/footer.tpt.php"); ?>  
</div><!--end .container-fluid-->
<?php include ($r_base."assets/php_modules/scripts.tpt.php"); ?>
</body>
</html>